/* tslint:disable */
/* eslint-disable */
/**
 * Kanga Exchange API
 * API documentation generated from Kanga Exchange source code.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@kanga.exchange
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { ApiV2AomClosePost200ResponseFromJSON, ApiV2AomCreatePost200ResponseFromJSON, ApiV2AomCreatePostRequestToJSON, ApiV2AomGetPost200ResponseFromJSON, ApiV2AomGetPostRequestToJSON, ApiV2AomListPost200ResponseFromJSON, ApiV2AomListPostRequestToJSON, ApiV2AomStartPost200ResponseFromJSON, ApiV2AomStopPost200ResponseFromJSON, ApiV2AomTopupPost200ResponseFromJSON, ApiV2AomTopupPostRequestToJSON, ApiV2AomUpdatePost200ResponseFromJSON, ApiV2AomUpdatePostRequestToJSON, ApiV2AomWithdrawPost200ResponseFromJSON, } from '../models';
/**
 *
 */
export class AOMApi extends runtime.BaseAPI {
    /**
     * Closes an automated order maker and transfers funds to wallet. An AOM can only be closed when inactive
     * Close automated order maker
     */
    async apiV2AomClosePostRaw(requestParameters, initOverrides) {
        if (requestParameters.apiV2AomGetPostRequest === null || requestParameters.apiV2AomGetPostRequest === undefined) {
            throw new runtime.RequiredError('apiV2AomGetPostRequest', 'Required parameter requestParameters.apiV2AomGetPostRequest was null or undefined when calling apiV2AomClosePost.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-sig"] = this.configuration.apiKey("api-sig"); // SignatureAuth authentication
        }
        const response = await this.request({
            path: `/api/v2/aom/close`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2AomGetPostRequestToJSON(requestParameters.apiV2AomGetPostRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2AomClosePost200ResponseFromJSON(jsonValue));
    }
    /**
     * Closes an automated order maker and transfers funds to wallet. An AOM can only be closed when inactive
     * Close automated order maker
     */
    async apiV2AomClosePost(requestParameters, initOverrides) {
        const response = await this.apiV2AomClosePostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Creates a new automated order maker.
     * Create automated order maker
     */
    async apiV2AomCreatePostRaw(requestParameters, initOverrides) {
        if (requestParameters.apiV2AomCreatePostRequest === null || requestParameters.apiV2AomCreatePostRequest === undefined) {
            throw new runtime.RequiredError('apiV2AomCreatePostRequest', 'Required parameter requestParameters.apiV2AomCreatePostRequest was null or undefined when calling apiV2AomCreatePost.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-sig"] = this.configuration.apiKey("api-sig"); // SignatureAuth authentication
        }
        const response = await this.request({
            path: `/api/v2/aom/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2AomCreatePostRequestToJSON(requestParameters.apiV2AomCreatePostRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2AomCreatePost200ResponseFromJSON(jsonValue));
    }
    /**
     * Creates a new automated order maker.
     * Create automated order maker
     */
    async apiV2AomCreatePost(requestParameters, initOverrides) {
        const response = await this.apiV2AomCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Returns automated order maker details and currency balances.
     * Automated order maker details
     */
    async apiV2AomGetPostRaw(requestParameters, initOverrides) {
        if (requestParameters.apiV2AomGetPostRequest === null || requestParameters.apiV2AomGetPostRequest === undefined) {
            throw new runtime.RequiredError('apiV2AomGetPostRequest', 'Required parameter requestParameters.apiV2AomGetPostRequest was null or undefined when calling apiV2AomGetPost.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-sig"] = this.configuration.apiKey("api-sig"); // SignatureAuth authentication
        }
        const response = await this.request({
            path: `/api/v2/aom/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2AomGetPostRequestToJSON(requestParameters.apiV2AomGetPostRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2AomGetPost200ResponseFromJSON(jsonValue));
    }
    /**
     * Returns automated order maker details and currency balances.
     * Automated order maker details
     */
    async apiV2AomGetPost(requestParameters, initOverrides) {
        const response = await this.apiV2AomGetPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Returns the list of automated order makers.
     * List automated order makers
     */
    async apiV2AomListPostRaw(requestParameters, initOverrides) {
        if (requestParameters.apiV2AomListPostRequest === null || requestParameters.apiV2AomListPostRequest === undefined) {
            throw new runtime.RequiredError('apiV2AomListPostRequest', 'Required parameter requestParameters.apiV2AomListPostRequest was null or undefined when calling apiV2AomListPost.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-sig"] = this.configuration.apiKey("api-sig"); // SignatureAuth authentication
        }
        const response = await this.request({
            path: `/api/v2/aom/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2AomListPostRequestToJSON(requestParameters.apiV2AomListPostRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2AomListPost200ResponseFromJSON(jsonValue));
    }
    /**
     * Returns the list of automated order makers.
     * List automated order makers
     */
    async apiV2AomListPost(requestParameters, initOverrides) {
        const response = await this.apiV2AomListPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Starts a newly created or previously stopped automated order maker.
     * Start automated order maker
     */
    async apiV2AomStartPostRaw(requestParameters, initOverrides) {
        if (requestParameters.apiV2AomGetPostRequest === null || requestParameters.apiV2AomGetPostRequest === undefined) {
            throw new runtime.RequiredError('apiV2AomGetPostRequest', 'Required parameter requestParameters.apiV2AomGetPostRequest was null or undefined when calling apiV2AomStartPost.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-sig"] = this.configuration.apiKey("api-sig"); // SignatureAuth authentication
        }
        const response = await this.request({
            path: `/api/v2/aom/start`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2AomGetPostRequestToJSON(requestParameters.apiV2AomGetPostRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2AomStartPost200ResponseFromJSON(jsonValue));
    }
    /**
     * Starts a newly created or previously stopped automated order maker.
     * Start automated order maker
     */
    async apiV2AomStartPost(requestParameters, initOverrides) {
        const response = await this.apiV2AomStartPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Stops an active automated order maker.
     * Stop automated order maker
     */
    async apiV2AomStopPostRaw(requestParameters, initOverrides) {
        if (requestParameters.apiV2AomGetPostRequest === null || requestParameters.apiV2AomGetPostRequest === undefined) {
            throw new runtime.RequiredError('apiV2AomGetPostRequest', 'Required parameter requestParameters.apiV2AomGetPostRequest was null or undefined when calling apiV2AomStopPost.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-sig"] = this.configuration.apiKey("api-sig"); // SignatureAuth authentication
        }
        const response = await this.request({
            path: `/api/v2/aom/stop`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2AomGetPostRequestToJSON(requestParameters.apiV2AomGetPostRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2AomStopPost200ResponseFromJSON(jsonValue));
    }
    /**
     * Stops an active automated order maker.
     * Stop automated order maker
     */
    async apiV2AomStopPost(requestParameters, initOverrides) {
        const response = await this.apiV2AomStopPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Tops up automated order maker currency balance.
     * Top up automated order maker
     */
    async apiV2AomTopupPostRaw(requestParameters, initOverrides) {
        if (requestParameters.apiV2AomTopupPostRequest === null || requestParameters.apiV2AomTopupPostRequest === undefined) {
            throw new runtime.RequiredError('apiV2AomTopupPostRequest', 'Required parameter requestParameters.apiV2AomTopupPostRequest was null or undefined when calling apiV2AomTopupPost.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-sig"] = this.configuration.apiKey("api-sig"); // SignatureAuth authentication
        }
        const response = await this.request({
            path: `/api/v2/aom/topup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2AomTopupPostRequestToJSON(requestParameters.apiV2AomTopupPostRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2AomTopupPost200ResponseFromJSON(jsonValue));
    }
    /**
     * Tops up automated order maker currency balance.
     * Top up automated order maker
     */
    async apiV2AomTopupPost(requestParameters, initOverrides) {
        const response = await this.apiV2AomTopupPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Updates an existing automated order maker. An AOM can only be updated when inactive.
     * Update automated order maker
     */
    async apiV2AomUpdatePostRaw(requestParameters, initOverrides) {
        if (requestParameters.apiV2AomUpdatePostRequest === null || requestParameters.apiV2AomUpdatePostRequest === undefined) {
            throw new runtime.RequiredError('apiV2AomUpdatePostRequest', 'Required parameter requestParameters.apiV2AomUpdatePostRequest was null or undefined when calling apiV2AomUpdatePost.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-sig"] = this.configuration.apiKey("api-sig"); // SignatureAuth authentication
        }
        const response = await this.request({
            path: `/api/v2/aom/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2AomUpdatePostRequestToJSON(requestParameters.apiV2AomUpdatePostRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2AomUpdatePost200ResponseFromJSON(jsonValue));
    }
    /**
     * Updates an existing automated order maker. An AOM can only be updated when inactive.
     * Update automated order maker
     */
    async apiV2AomUpdatePost(requestParameters, initOverrides) {
        const response = await this.apiV2AomUpdatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Transfers the total balance of automated order maker purchases to wallet.
     * Automated order maker purchase balance withdrawal
     */
    async apiV2AomWithdrawPostRaw(requestParameters, initOverrides) {
        if (requestParameters.apiV2AomGetPostRequest === null || requestParameters.apiV2AomGetPostRequest === undefined) {
            throw new runtime.RequiredError('apiV2AomGetPostRequest', 'Required parameter requestParameters.apiV2AomGetPostRequest was null or undefined when calling apiV2AomWithdrawPost.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-sig"] = this.configuration.apiKey("api-sig"); // SignatureAuth authentication
        }
        const response = await this.request({
            path: `/api/v2/aom/withdraw`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2AomGetPostRequestToJSON(requestParameters.apiV2AomGetPostRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2AomWithdrawPost200ResponseFromJSON(jsonValue));
    }
    /**
     * Transfers the total balance of automated order maker purchases to wallet.
     * Automated order maker purchase balance withdrawal
     */
    async apiV2AomWithdrawPost(requestParameters, initOverrides) {
        const response = await this.apiV2AomWithdrawPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
//# sourceMappingURL=AOMApi.js.map