/* tslint:disable */
/* eslint-disable */
/**
 * Kanga Exchange API
 * API documentation generated from Kanga Exchange source code.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@kanga.exchange
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { ApiV2LabelAssignPost200ResponseFromJSON, ApiV2LabelListPost200ResponseFromJSON, ApiV2LabelListPostRequestToJSON, ApiV2LabelUnassignPost200ResponseFromJSON, ApiV2LabelUnassignPostRequestToJSON, ApiV2LabelUserListPost200ResponseFromJSON, ApiV2LabelUserListPostRequestToJSON, } from '../models';
/**
 *
 */
export class LABELApi extends runtime.BaseAPI {
    /**
     * Assigns a label to the specified user.
     * Assign a label
     */
    async apiV2LabelAssignPostRaw(requestParameters, initOverrides) {
        if (requestParameters.apiV2LabelUnassignPostRequest === null || requestParameters.apiV2LabelUnassignPostRequest === undefined) {
            throw new runtime.RequiredError('apiV2LabelUnassignPostRequest', 'Required parameter requestParameters.apiV2LabelUnassignPostRequest was null or undefined when calling apiV2LabelAssignPost.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-sig"] = this.configuration.apiKey("api-sig"); // SignatureAuth authentication
        }
        const response = await this.request({
            path: `/api/v2/label/assign`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2LabelUnassignPostRequestToJSON(requestParameters.apiV2LabelUnassignPostRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2LabelAssignPost200ResponseFromJSON(jsonValue));
    }
    /**
     * Assigns a label to the specified user.
     * Assign a label
     */
    async apiV2LabelAssignPost(requestParameters, initOverrides) {
        const response = await this.apiV2LabelAssignPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Returns the list of available labels.
     * Label list
     */
    async apiV2LabelListPostRaw(requestParameters, initOverrides) {
        if (requestParameters.apiV2LabelListPostRequest === null || requestParameters.apiV2LabelListPostRequest === undefined) {
            throw new runtime.RequiredError('apiV2LabelListPostRequest', 'Required parameter requestParameters.apiV2LabelListPostRequest was null or undefined when calling apiV2LabelListPost.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-sig"] = this.configuration.apiKey("api-sig"); // SignatureAuth authentication
        }
        const response = await this.request({
            path: `/api/v2/label/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2LabelListPostRequestToJSON(requestParameters.apiV2LabelListPostRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2LabelListPost200ResponseFromJSON(jsonValue));
    }
    /**
     * Returns the list of available labels.
     * Label list
     */
    async apiV2LabelListPost(requestParameters, initOverrides) {
        const response = await this.apiV2LabelListPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Unassigns a label from the specified user.
     * Unassign a label
     */
    async apiV2LabelUnassignPostRaw(requestParameters, initOverrides) {
        if (requestParameters.apiV2LabelUnassignPostRequest === null || requestParameters.apiV2LabelUnassignPostRequest === undefined) {
            throw new runtime.RequiredError('apiV2LabelUnassignPostRequest', 'Required parameter requestParameters.apiV2LabelUnassignPostRequest was null or undefined when calling apiV2LabelUnassignPost.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-sig"] = this.configuration.apiKey("api-sig"); // SignatureAuth authentication
        }
        const response = await this.request({
            path: `/api/v2/label/unassign`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2LabelUnassignPostRequestToJSON(requestParameters.apiV2LabelUnassignPostRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2LabelUnassignPost200ResponseFromJSON(jsonValue));
    }
    /**
     * Unassigns a label from the specified user.
     * Unassign a label
     */
    async apiV2LabelUnassignPost(requestParameters, initOverrides) {
        const response = await this.apiV2LabelUnassignPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Returns all labels assigned to the specified user.
     * User labels
     */
    async apiV2LabelUserListPostRaw(requestParameters, initOverrides) {
        if (requestParameters.apiV2LabelUserListPostRequest === null || requestParameters.apiV2LabelUserListPostRequest === undefined) {
            throw new runtime.RequiredError('apiV2LabelUserListPostRequest', 'Required parameter requestParameters.apiV2LabelUserListPostRequest was null or undefined when calling apiV2LabelUserListPost.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-sig"] = this.configuration.apiKey("api-sig"); // SignatureAuth authentication
        }
        const response = await this.request({
            path: `/api/v2/label/user/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV2LabelUserListPostRequestToJSON(requestParameters.apiV2LabelUserListPostRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2LabelUserListPost200ResponseFromJSON(jsonValue));
    }
    /**
     * Returns all labels assigned to the specified user.
     * User labels
     */
    async apiV2LabelUserListPost(requestParameters, initOverrides) {
        const response = await this.apiV2LabelUserListPostRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
//# sourceMappingURL=LABELApi.js.map