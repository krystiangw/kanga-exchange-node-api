/* tslint:disable */
/* eslint-disable */
/**
 * Kanga Exchange API
 * API documentation generated from Kanga Exchange source code.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@kanga.exchange
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { ApiV2MarketChangesGet200ResponseFromJSON, ApiV2MarketDepthGet200ResponseFromJSON, ApiV2MarketOrderbookRawGet200ResponseFromJSON, ApiV2MarketTradesGet200ResponseFromJSON, } from '../models';
/**
 *
 */
export class PublicApi extends runtime.BaseAPI {
    /**
     * Returns the list of assets accepted by the exchange.
     * Asset list
     */
    async apiV2MarketAssetsGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/v2/market/assets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.TextApiResponse(response);
    }
    /**
     * Returns the list of assets accepted by the exchange.
     * Asset list
     */
    async apiV2MarketAssetsGet(initOverrides) {
        const response = await this.apiV2MarketAssetsGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Returns raw change data for the specified market.
     * Market changes
     */
    async apiV2MarketChangesGetRaw(requestParameters, initOverrides) {
        if (requestParameters.market === null || requestParameters.market === undefined) {
            throw new runtime.RequiredError('market', 'Required parameter requestParameters.market was null or undefined when calling apiV2MarketChangesGet.');
        }
        const queryParameters = {};
        if (requestParameters.market !== undefined) {
            queryParameters['market'] = requestParameters.market;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/v2/market/changes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MarketChangesGet200ResponseFromJSON(jsonValue));
    }
    /**
     * Returns raw change data for the specified market.
     * Market changes
     */
    async apiV2MarketChangesGet(requestParameters, initOverrides) {
        const response = await this.apiV2MarketChangesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Returns the order book for the specified market.
     * Order book
     */
    async apiV2MarketDepthGetRaw(requestParameters, initOverrides) {
        if (requestParameters.market === null || requestParameters.market === undefined) {
            throw new runtime.RequiredError('market', 'Required parameter requestParameters.market was null or undefined when calling apiV2MarketDepthGet.');
        }
        const queryParameters = {};
        if (requestParameters.market !== undefined) {
            queryParameters['market'] = requestParameters.market;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/v2/market/depth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MarketDepthGet200ResponseFromJSON(jsonValue));
    }
    /**
     * Returns the order book for the specified market.
     * Order book
     */
    async apiV2MarketDepthGet(requestParameters, initOverrides) {
        const response = await this.apiV2MarketDepthGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Returns raw order book data for the specified market.
     * Order book (raw)
     */
    async apiV2MarketOrderbookRawGetRaw(requestParameters, initOverrides) {
        if (requestParameters.market === null || requestParameters.market === undefined) {
            throw new runtime.RequiredError('market', 'Required parameter requestParameters.market was null or undefined when calling apiV2MarketOrderbookRawGet.');
        }
        const queryParameters = {};
        if (requestParameters.market !== undefined) {
            queryParameters['market'] = requestParameters.market;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/v2/market/orderbook/raw`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MarketOrderbookRawGet200ResponseFromJSON(jsonValue));
    }
    /**
     * Returns raw order book data for the specified market.
     * Order book (raw)
     */
    async apiV2MarketOrderbookRawGet(requestParameters, initOverrides) {
        const response = await this.apiV2MarketOrderbookRawGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Returns last price and 24-hour change for all active markets.
     * Market tickers
     */
    async apiV2MarketTickerGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/v2/market/ticker`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.TextApiResponse(response);
    }
    /**
     * Returns last price and 24-hour change for all active markets.
     * Market tickers
     */
    async apiV2MarketTickerGet(initOverrides) {
        const response = await this.apiV2MarketTickerGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Returns the list of trades for the specified market.
     * Market trades
     */
    async apiV2MarketTradesGetRaw(requestParameters, initOverrides) {
        if (requestParameters.market === null || requestParameters.market === undefined) {
            throw new runtime.RequiredError('market', 'Required parameter requestParameters.market was null or undefined when calling apiV2MarketTradesGet.');
        }
        const queryParameters = {};
        if (requestParameters.market !== undefined) {
            queryParameters['market'] = requestParameters.market;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/v2/market/trades`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV2MarketTradesGet200ResponseFromJSON(jsonValue));
    }
    /**
     * Returns the list of trades for the specified market.
     * Market trades
     */
    async apiV2MarketTradesGet(requestParameters, initOverrides) {
        const response = await this.apiV2MarketTradesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
//# sourceMappingURL=PublicApi.js.map