"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Kanga Exchange API
 * API documentation generated from Kanga Exchange source code.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@kanga.exchange
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublicApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class PublicApi extends runtime.BaseAPI {
    /**
     * Returns the list of assets accepted by the exchange.
     * Asset list
     */
    async apiV2MarketAssetsGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/v2/market/assets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.TextApiResponse(response);
    }
    /**
     * Returns the list of assets accepted by the exchange.
     * Asset list
     */
    async apiV2MarketAssetsGet(initOverrides) {
        const response = await this.apiV2MarketAssetsGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Returns raw change data for the specified market.
     * Market changes
     */
    async apiV2MarketChangesGetRaw(requestParameters, initOverrides) {
        if (requestParameters.market === null || requestParameters.market === undefined) {
            throw new runtime.RequiredError('market', 'Required parameter requestParameters.market was null or undefined when calling apiV2MarketChangesGet.');
        }
        const queryParameters = {};
        if (requestParameters.market !== undefined) {
            queryParameters['market'] = requestParameters.market;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/v2/market/changes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ApiV2MarketChangesGet200ResponseFromJSON)(jsonValue));
    }
    /**
     * Returns raw change data for the specified market.
     * Market changes
     */
    async apiV2MarketChangesGet(requestParameters, initOverrides) {
        const response = await this.apiV2MarketChangesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Returns the order book for the specified market.
     * Order book
     */
    async apiV2MarketDepthGetRaw(requestParameters, initOverrides) {
        if (requestParameters.market === null || requestParameters.market === undefined) {
            throw new runtime.RequiredError('market', 'Required parameter requestParameters.market was null or undefined when calling apiV2MarketDepthGet.');
        }
        const queryParameters = {};
        if (requestParameters.market !== undefined) {
            queryParameters['market'] = requestParameters.market;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/v2/market/depth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ApiV2MarketDepthGet200ResponseFromJSON)(jsonValue));
    }
    /**
     * Returns the order book for the specified market.
     * Order book
     */
    async apiV2MarketDepthGet(requestParameters, initOverrides) {
        const response = await this.apiV2MarketDepthGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Returns raw order book data for the specified market.
     * Order book (raw)
     */
    async apiV2MarketOrderbookRawGetRaw(requestParameters, initOverrides) {
        if (requestParameters.market === null || requestParameters.market === undefined) {
            throw new runtime.RequiredError('market', 'Required parameter requestParameters.market was null or undefined when calling apiV2MarketOrderbookRawGet.');
        }
        const queryParameters = {};
        if (requestParameters.market !== undefined) {
            queryParameters['market'] = requestParameters.market;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/v2/market/orderbook/raw`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ApiV2MarketOrderbookRawGet200ResponseFromJSON)(jsonValue));
    }
    /**
     * Returns raw order book data for the specified market.
     * Order book (raw)
     */
    async apiV2MarketOrderbookRawGet(requestParameters, initOverrides) {
        const response = await this.apiV2MarketOrderbookRawGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Returns last price and 24-hour change for all active markets.
     * Market tickers
     */
    async apiV2MarketTickerGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/api/v2/market/ticker`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.TextApiResponse(response);
    }
    /**
     * Returns last price and 24-hour change for all active markets.
     * Market tickers
     */
    async apiV2MarketTickerGet(initOverrides) {
        const response = await this.apiV2MarketTickerGetRaw(initOverrides);
        return await response.value();
    }
    /**
     * Returns the list of trades for the specified market.
     * Market trades
     */
    async apiV2MarketTradesGetRaw(requestParameters, initOverrides) {
        if (requestParameters.market === null || requestParameters.market === undefined) {
            throw new runtime.RequiredError('market', 'Required parameter requestParameters.market was null or undefined when calling apiV2MarketTradesGet.');
        }
        const queryParameters = {};
        if (requestParameters.market !== undefined) {
            queryParameters['market'] = requestParameters.market;
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/api/v2/market/trades`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ApiV2MarketTradesGet200ResponseFromJSON)(jsonValue));
    }
    /**
     * Returns the list of trades for the specified market.
     * Market trades
     */
    async apiV2MarketTradesGet(requestParameters, initOverrides) {
        const response = await this.apiV2MarketTradesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.PublicApi = PublicApi;
//# sourceMappingURL=PublicApi.js.map