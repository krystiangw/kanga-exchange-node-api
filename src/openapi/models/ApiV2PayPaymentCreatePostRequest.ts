/* tslint:disable */
/* eslint-disable */
/**
 * Kanga Exchange API
 * API documentation generated from Kanga Exchange source code.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@kanga.exchange
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ApiV2PayPaymentCreatePostRequest
 */
export interface ApiV2PayPaymentCreatePostRequest {
    /**
     * Unique request identifier, e.g. a timestamp in milliseconds
     * @type {number}
     * @memberof ApiV2PayPaymentCreatePostRequest
     */
    nonce: number;
    /**
     * Your public key
     * @type {string}
     * @memberof ApiV2PayPaymentCreatePostRequest
     */
    appId: string;
    /**
     * Item price. I.e. for item worth 100 USDT this field would be '100.00'. Depending from currency, maximum limit is 18 decimal places
     * @type {string}
     * @memberof ApiV2PayPaymentCreatePostRequest
     */
    itemPrice: string;
    /**
     * Item Currency. I.e. for item worth 100 USDT this field would be 'USDT'
     * @type {string}
     * @memberof ApiV2PayPaymentCreatePostRequest
     */
    itemCurrency: string;
    /**
     * Currency which shop will receive on own Kanga Wallet i.e. 'BTC' or 'USDT'
     * @type {string}
     * @memberof ApiV2PayPaymentCreatePostRequest
     */
    destinationCurrency: string;
    /**
     * Optional. Used to force payment currency on user. User will have only one currency available when executing payment 
     * @type {string}
     * @memberof ApiV2PayPaymentCreatePostRequest
     */
    forcedPaymentCurrency?: string;
    /**
     * KangaPay six digit code provided to shop by user. User takes it from Kanga Wallet app or browser
     * @type {string}
     * @memberof ApiV2PayPaymentCreatePostRequest
     */
    payCode: string;
    /**
     * Up to 128 character long payment id generated by shop. Has to match given regexp: ^[a-zA-Z0-9_.-]{1,128}
     * @type {string}
     * @memberof ApiV2PayPaymentCreatePostRequest
     */
    paymentId: string;
    /**
     * Description provided by shop. Limited to 120 characters
     * @type {string}
     * @memberof ApiV2PayPaymentCreatePostRequest
     */
    paymentDescription: string;
    /**
     * Webhook (notification URL) - will be called after payment reached final (success or failed) state
     * @type {string}
     * @memberof ApiV2PayPaymentCreatePostRequest
     */
    notificationUrl: string;
}

/**
 * Check if a given object implements the ApiV2PayPaymentCreatePostRequest interface.
 */
export function instanceOfApiV2PayPaymentCreatePostRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "nonce" in value;
    isInstance = isInstance && "appId" in value;
    isInstance = isInstance && "itemPrice" in value;
    isInstance = isInstance && "itemCurrency" in value;
    isInstance = isInstance && "destinationCurrency" in value;
    isInstance = isInstance && "payCode" in value;
    isInstance = isInstance && "paymentId" in value;
    isInstance = isInstance && "paymentDescription" in value;
    isInstance = isInstance && "notificationUrl" in value;

    return isInstance;
}

export function ApiV2PayPaymentCreatePostRequestFromJSON(json: any): ApiV2PayPaymentCreatePostRequest {
    return ApiV2PayPaymentCreatePostRequestFromJSONTyped(json, false);
}

export function ApiV2PayPaymentCreatePostRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiV2PayPaymentCreatePostRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'nonce': json['nonce'],
        'appId': json['appId'],
        'itemPrice': json['itemPrice'],
        'itemCurrency': json['itemCurrency'],
        'destinationCurrency': json['destinationCurrency'],
        'forcedPaymentCurrency': !exists(json, 'forcedPaymentCurrency') ? undefined : json['forcedPaymentCurrency'],
        'payCode': json['payCode'],
        'paymentId': json['paymentId'],
        'paymentDescription': json['paymentDescription'],
        'notificationUrl': json['notificationUrl'],
    };
}

export function ApiV2PayPaymentCreatePostRequestToJSON(value?: ApiV2PayPaymentCreatePostRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'nonce': value.nonce,
        'appId': value.appId,
        'itemPrice': value.itemPrice,
        'itemCurrency': value.itemCurrency,
        'destinationCurrency': value.destinationCurrency,
        'forcedPaymentCurrency': value.forcedPaymentCurrency,
        'payCode': value.payCode,
        'paymentId': value.paymentId,
        'paymentDescription': value.paymentDescription,
        'notificationUrl': value.notificationUrl,
    };
}

