/* tslint:disable */
/* eslint-disable */
/**
 * Kanga.exchange API
 * This is API generated from kanga.exchange code.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@kanga.exchange
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ApiAdminMarketTickerAddPost200ResponseOneOf
 */
export interface ApiAdminMarketTickerAddPost200ResponseOneOf {
    /**
     * 
     * @type {string}
     * @memberof ApiAdminMarketTickerAddPost200ResponseOneOf
     */
    result: ApiAdminMarketTickerAddPost200ResponseOneOfResultEnum;
}


/**
 * @export
 */
export const ApiAdminMarketTickerAddPost200ResponseOneOfResultEnum = {
    Fail: 'fail'
} as const;
export type ApiAdminMarketTickerAddPost200ResponseOneOfResultEnum = typeof ApiAdminMarketTickerAddPost200ResponseOneOfResultEnum[keyof typeof ApiAdminMarketTickerAddPost200ResponseOneOfResultEnum];


/**
 * Check if a given object implements the ApiAdminMarketTickerAddPost200ResponseOneOf interface.
 */
export function instanceOfApiAdminMarketTickerAddPost200ResponseOneOf(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "result" in value;

    return isInstance;
}

export function ApiAdminMarketTickerAddPost200ResponseOneOfFromJSON(json: any): ApiAdminMarketTickerAddPost200ResponseOneOf {
    return ApiAdminMarketTickerAddPost200ResponseOneOfFromJSONTyped(json, false);
}

export function ApiAdminMarketTickerAddPost200ResponseOneOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiAdminMarketTickerAddPost200ResponseOneOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'result': json['result'],
    };
}

export function ApiAdminMarketTickerAddPost200ResponseOneOfToJSON(value?: ApiAdminMarketTickerAddPost200ResponseOneOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'result': value.result,
    };
}

