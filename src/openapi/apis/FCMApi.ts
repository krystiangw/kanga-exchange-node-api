/* tslint:disable */
/* eslint-disable */
/**
 * Kanga.exchange API
 * This is API generated from kanga.exchange code.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@kanga.exchange
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiFcmSendPost200Response,
  ApiFcmSendPostRequest,
  ApiUserFcmTokenRegisterPost200Response,
  ApiUserFcmTokenRegisterPostRequest,
} from '../models';
import {
    ApiFcmSendPost200ResponseFromJSON,
    ApiFcmSendPost200ResponseToJSON,
    ApiFcmSendPostRequestFromJSON,
    ApiFcmSendPostRequestToJSON,
    ApiUserFcmTokenRegisterPost200ResponseFromJSON,
    ApiUserFcmTokenRegisterPost200ResponseToJSON,
    ApiUserFcmTokenRegisterPostRequestFromJSON,
    ApiUserFcmTokenRegisterPostRequestToJSON,
} from '../models';

export interface ApiFcmSendPostOperationRequest {
    apiFcmSendPostRequest: ApiFcmSendPostRequest;
}

export interface ApiUserFcmTokenRegisterPostOperationRequest {
    apiUserFcmTokenRegisterPostRequest: ApiUserFcmTokenRegisterPostRequest;
}

/**
 * 
 */
export class FCMApi extends runtime.BaseAPI {

    /**
     * Open handler that will send any message to specified recipient. Handler is open as it is impossible to generate proper token for this FCM server.
     * Sends a message to registered device
     */
    async apiFcmSendPostRaw(requestParameters: ApiFcmSendPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiFcmSendPost200Response>> {
        if (requestParameters.apiFcmSendPostRequest === null || requestParameters.apiFcmSendPostRequest === undefined) {
            throw new runtime.RequiredError('apiFcmSendPostRequest','Required parameter requestParameters.apiFcmSendPostRequest was null or undefined when calling apiFcmSendPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/fcm/send`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiFcmSendPostRequestToJSON(requestParameters.apiFcmSendPostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiFcmSendPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Open handler that will send any message to specified recipient. Handler is open as it is impossible to generate proper token for this FCM server.
     * Sends a message to registered device
     */
    async apiFcmSendPost(requestParameters: ApiFcmSendPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiFcmSendPost200Response> {
        const response = await this.apiFcmSendPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This handler will register device FCM token so it can be used for sending push notifications from the cloud.
     * Registers device token for user
     */
    async apiUserFcmTokenRegisterPostRaw(requestParameters: ApiUserFcmTokenRegisterPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiUserFcmTokenRegisterPost200Response>> {
        if (requestParameters.apiUserFcmTokenRegisterPostRequest === null || requestParameters.apiUserFcmTokenRegisterPostRequest === undefined) {
            throw new runtime.RequiredError('apiUserFcmTokenRegisterPostRequest','Required parameter requestParameters.apiUserFcmTokenRegisterPostRequest was null or undefined when calling apiUserFcmTokenRegisterPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/fcm/token/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiUserFcmTokenRegisterPostRequestToJSON(requestParameters.apiUserFcmTokenRegisterPostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiUserFcmTokenRegisterPost200ResponseFromJSON(jsonValue));
    }

    /**
     * This handler will register device FCM token so it can be used for sending push notifications from the cloud.
     * Registers device token for user
     */
    async apiUserFcmTokenRegisterPost(requestParameters: ApiUserFcmTokenRegisterPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiUserFcmTokenRegisterPost200Response> {
        const response = await this.apiUserFcmTokenRegisterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
